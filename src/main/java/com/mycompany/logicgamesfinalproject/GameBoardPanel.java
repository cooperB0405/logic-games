/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.logicgamesfinalproject;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author coope
 */
public class GameBoardPanel extends javax.swing.JPanel{
    
    private MineSweeperCells[][] msCells;
    private MemoryCells[][] memCells;
    private boolean flagOn;
    private ArrayList<Updatable> observerList= new ArrayList<>();
    /**
     * Creates new form GameBoard
     */
    public GameBoardPanel() {
        initComponents();
        flagOn=false;
        
    }
    
    public void addUpdatable(Updatable observer){
        observerList.add(observer);
    }
    
    public void flagChange(){
        flagOn=!flagOn;
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2= (Graphics2D)g;
        
        
        if(msCells!=null){
            //drawing mineSweeper
            for (int i=0; i<msCells.length; i++) {
                for(int j=0; j<msCells[i].length; j++){
                    if(msCells[i][j].isAMine()){
                        g2.drawString("M", msCells[i][j].cellx+(BoardCell.cellw/2)+5, msCells[i][j].celly+(BoardCell.cellh/2)+5);
                    }
                    else{g2.drawString(Integer.toString(msCells[i][j].getAdjMines()), 
                            msCells[i][j].cellx+(BoardCell.cellw/2)+5, msCells[i][j].celly+(BoardCell.cellh/2)+5);
                    }
                    
                    //covers cell info if it hasnt been revealed
                    if (msCells[i][j].hasBeenRevealed()==false){
                        g2.setColor(Color.black);
                        g2.fillRect(msCells[i][j].cellx, msCells[i][j].celly, BoardCell.cellw, BoardCell.cellh);
                        if(msCells[i][j].hasBeenFlagged()){
                            g2.setColor(Color.orange);
                            g2.drawString("flag", msCells[i][j].cellx+(BoardCell.cellw/2)+5, msCells[i][j].celly+(BoardCell.cellh/2)+5);
                        }
                        
                        
                    }
                    g2.setColor(Color.gray);
                    g2.drawRect(msCells[i][j].cellx, msCells[i][j].celly, BoardCell.cellw, BoardCell.cellh);
                    
                }

            }

        }
        if(memCells!=null){
            //drawing memory
            for (int i=0; i<memCells.length; i++) {
                for(int j=0; j<memCells[i].length; j++){
                    g2.drawString(Integer.toString(memCells[i][j].getValue()), memCells[i][j].cellx+(BoardCell.cellw/2)+5, memCells[i][j].celly+(BoardCell.cellh/2)+5);
                    if (memCells[i][j].hasBeenRevealed()==false){
                        g2.setColor(Color.black);
                        g2.fillRect(memCells[i][j].cellx, memCells[i][j].celly, BoardCell.cellw, BoardCell.cellh);
                    }
                    g2.setColor(Color.gray);
                    g2.drawRect(memCells[i][j].cellx, memCells[i][j].celly, BoardCell.cellw, BoardCell.cellh);
                }

            }

        }

    }
    

    public void getCells(MineSweeperCells[][] msCells, MemoryCells[][] memCells){
        this.msCells=msCells;
        this.memCells=memCells;
    }
    



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.MatteBorder(null));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        int mouseX=evt.getX();
        int mouseY=evt.getY();
        double boardX=mouseX/BoardCell.cellw;
        double boardY=mouseY/BoardCell.cellh;
        boardX=Math.floor(boardX);
        boardY=Math.floor(boardY);
        int arrayIndexX=(int)boardX;
        int arrayIndexY=(int)boardY;
        
        try{
            if (msCells==null){memCells[arrayIndexX][arrayIndexY].revealCell(); }
            else{
                if(!MineSweeperCells.lose ){
                    if(!flagOn && MineSweeperCells.getNumFlagsRemaining()!=0){
                        msCells[arrayIndexX][arrayIndexY].revealCell();
                        if(msCells[arrayIndexX][arrayIndexY].isAMine()){
                            MineSweeperCells.lose=true;
                            repaint();
                            for(int i=0; i< observerList.size(); i++){
                                observerList.get(i).update(MineSweeperCells.lose);
                            }
                        }
                    }
                    else{
                        if(MineSweeperCells.getNumFlagsRemaining()== 0){
                            flagOn=true;
                            if(msCells[arrayIndexX][arrayIndexY].hasBeenFlagged()){
                                msCells[arrayIndexX][arrayIndexY].changeFlag();
                            }
                        }
                        else{msCells[arrayIndexX][arrayIndexY].changeFlag();}
                        //call check win and if false tell you have not flagged all mines
                        for(int i=0; i<observerList.size(); i++){
                            observerList.get(i).update(MineSweeperCells.getNumFlagsRemaining());
                        }
                        if(MineSweeperCells.getNumFlagsRemaining()==0){
                            repaint();
                            if(MineSweeperCells.checkWin(msCells, MineSweeperCells.numMinesInGrid)){
                                //post you won
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "All Mines Are Not Flagged, Unflag And Try Again", "Try Again",JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }

                }
            }
        }
        catch(Exception e){
            System.out.println("throw exception later");
        }


        
        repaint();
        
        
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
